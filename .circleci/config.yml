# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# These environment variables must be set in CircleCI UI
#
# DOCKERHUB_REPO - docker hub repo, format: <username>/<repo>
# DOCKER_EMAIL   - login info for docker hub
# DOCKER_USER
# DOCKER_PASS

version: 2

# This is not part of circleci, but it lets us not repeat ourselves.
STUFF:
  python_image: &python_image
    image: python:3.8-alpine

  # it's useful to not build branches that contain slashes,
  # if it is later decided to map branches to docker tags.
  main_filters: &main_filters
    branches:
      ignore:
        - /\//

jobs:
  lint:
    working_directory: /app
    docker:
      - *python_image
    steps:
      - checkout
      - run: apk add gcc linux-headers libc-dev
      - run: pip install black==19.10b0 && pip install flake8==3.7.9
      - run: black --diff .
      - run: flake8 .
  test:
    working_directory: /app
    docker:
      - *python_image
    steps:
      - checkout
      - run: |
          /app/docker/install-deps.sh \
            /app/requirements.txt
      - run: pip --no-cache install .
      - run:
          name: run tests
          command: |
            mkdir test-reports
            pytest --junitxml=test-reports/junit.xml
          environment:
            # this is needed for pytest to run
            PYTHONPATH: /app
            # this lets you watch the build progress in the web UI
            PYTHONUNBUFFERED: 1

      - store_test_results:
          path: test-reports

      - store_artifacts:
          path: test-reports

  build:
    docker:
      - image: docker:17.06.1-ce
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: build the prod image
          command: |
            docker build --pull \
              --build-arg CIRCLE_SHA1="$CIRCLE_SHA1" \
              --build-arg CIRCLE_BUILD_URL="$CIRCLE_BUILD_URL" \
              -f docker/Dockerfile-prod \
              -t "${DOCKERHUB_REPO:-mozilla/landoui}" .
      - run:
          name: copy version.json
          command: |
            docker run -i "${DOCKERHUB_REPO:-mozilla/landoui}" cat /version.json > version.json
            mkdir /artifacts && cp version.json /artifacts/version.js
      - run:
          name: get image id
          command: |
            docker inspect -f '{{.Id}}' "${DOCKERHUB_REPO:-mozilla/landoui}" \
              | tee /artifacts/docker-image-shasum256.txt
      - store_artifacts:
          path: /artifacts
      - deploy:
          command: |
            if [[ "x$DOCKERHUB_REPO" != x ]]; then
              docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
              docker tag "${DOCKERHUB_REPO}" "${DOCKERHUB_REPO}:${CIRCLE_SHA1}"
              docker push "${DOCKERHUB_REPO}:${CIRCLE_SHA1}"
              if [[ ${CIRCLE_BRANCH} == master ]]; then
                docker push "${DOCKERHUB_REPO}:latest"
              elif [[ ${CIRCLE_BRANCH} == develop ]]; then
                docker tag "${DOCKERHUB_REPO}" "${DOCKERHUB_REPO}:develop-latest"
                docker push "${DOCKERHUB_REPO}:develop-latest"
              fi
            fi

workflows:
  version: 2
  main:
    jobs:
      - lint:
          filters: *main_filters
      - test:
          filters: *main_filters
          requires:
            - lint
      - build:
          filters: *main_filters
          requires:
            - lint
            - test
